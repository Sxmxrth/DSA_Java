import java.util.*;public class FractionalKnap {    public static double fractionalKnapsack(int capacity, int[] weights, int[] values) {        int n = weights.length;        double totalValue = 0;        ArrayList<Item> items = new ArrayList<>();        // Create items list with corresponding value/weight ratios        for (int i = 0; i < n; i++) {            double ratio = (double) values[i] / (double) weights[i];            items.add(new Item(weights[i], values[i], ratio));        }        // Sort items by value/weight ratio in descending order        Collections.sort(items, new Comparator<Item>() {            @Override            public int compare(Item i1, Item i2) {                return Double.compare(i2.ratio, i1.ratio);            }        });        // Take items with highest ratio until capacity is full        for (Item item : items) {            if (capacity >= item.weight) {                totalValue += item.value;                capacity -= item.weight;            } else {                double fraction = (double) capacity / (double) item.weight;                totalValue += fraction * item.value;                break;            }        }        return totalValue;    }    static class Item {        int weight;        int value;        double ratio;        public Item(int weight, int value, double ratio) {            this.weight = weight;            this.value = value;            this.ratio = ratio;        }    }    public static void main(String[] args) {        int capacity = 10;        int[] weights = {3, 3, 2, 5, 1};        int[] values = {10, 15, 10, 12, 8};        double maxValue = fractionalKnapsack(capacity, weights, values);        System.out.println("Maximum value: " + maxValue);    }}