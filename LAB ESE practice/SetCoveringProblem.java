import java.util.*;public class SetCoveringProblem {    public static void main(String[] args) {        Set<Integer> universe = new HashSet<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));        List<Set<Integer>> subsets = new ArrayList<>();        subsets.add(new HashSet<>(Arrays.asList(1, 2, 3, 4)));        subsets.add(new HashSet<>(Arrays.asList(4, 5, 6)));        subsets.add(new HashSet<>(Arrays.asList(7, 8, 9)));        subsets.add(new HashSet<>(Arrays.asList(1, 2)));        subsets.add(new HashSet<>(Arrays.asList(3, 6, 9, 10)));        Set<Integer> selectedSubsets = new HashSet<>();        while (!universe.isEmpty()){            int bestSubsetIndex = -1;            int bestSubsetCoveredCount = 0;            for (int i = 0; i < subsets.size(); i++) {                Set<Integer> subset = subsets.get(i);                int coveredCount = 0;                for (int element : subset){                    if(universe.contains(element)){                        coveredCount++;                    }                }                if(coveredCount > bestSubsetCoveredCount){                    bestSubsetCoveredCount = coveredCount;                    bestSubsetIndex = i;                }            }            if(bestSubsetIndex == -1){                break;            }            selectedSubsets.add(bestSubsetIndex);            Set<Integer> bestSubset = subsets.get(bestSubsetIndex);            for (int element : bestSubset) {                universe.remove(element);            }        }        System.out.println(selectedSubsets);    }}